# -*- coding: utf-8 -*-
"""Copy of PROJECT-2023-BEGINNER-csk-data-science.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fPdteB-REb9d56fKprcU4gwVZdJ3AoYN
"""

#Delete the hastag below and rerun this cell to ensure you have the datascience library installed
#!pip install git+https://github.com/data-8/datascience.git

"""#2023 CSK DATA SCIENCE PROJECT: BEGINNER EDITION"""

# Commented out IPython magic to ensure Python compatibility.
# Run this cell to set up the notebook, but please don't change it.

from datascience import *
import numpy as np
import warnings
warnings.filterwarnings("ignore")

# %matplotlib inline
import matplotlib.pyplot as plots
#plots.style.use('fivethirtyeight')
#plots.rcParams["patch.force_edgecolor"] = True

#Pandas is a library used to analyze dataframes through different table methods
#Numpy is used for mathematical analysis

"""> Pandas is a library used to analyze dataframes through different table methods


> Numpy is used for mathematical analysis

We are using the Data 8 datascience library method to read in a csv file as a dataFrame. Further documentation can be found in the [Data 8 Python Reference](http://www.data8.org/fa22/reference/)
"""

women_stem_csv='https://raw.githubusercontent.com/mallikareddy22/CSK_DataScience/main/CSK%202022%20DS%20Materials/women-stem.csv'
women_stem = Table().read_table(women_stem_csv)
women_stem

#The where method takes in a conditional and only keeps rows where the conditional is True
#The following method will return a table only with rows where the Major category is engineering and the amount of Women is less than 500

less_than_500=women_stem.where("Major_category", are.equal_to("Engineering")).where("Women", are.below(500))
less_than_500

"""##**IMPORTANT:** All exercises in this project can be completed using tabular and array methods documented in the [Data 8 Python Reference](http://www.data8.org/fa22/reference/).


> So be sure to have that ready on hand if you ever get stuck!

###Exercise #1
"""

#Return the number of Engineering majors where ShareWomen is less than 0.5.
low_engineering= ...
num_low_engineering = low_engineering.num_rows
#<tbl name>.num_rows will return the number of rows in a table

num_low_engineering

"""###Exercise #2"""

#Using your previous answer, what is the percentage of Engineering majors where ShareWomen is less than 0.5 compared to all Engineering majors?
engineering_majors=...
engineering_majors_length =
percentage_women = num_low_engineering/engineering_majors_length * 100
percentage_women

"""
> Shocking number, right? In all the engineering majors on this table, women are less than 50 percent or consistently the minority!

Let's look into why the amount of women in Engineering majors is so low and how we can help improve this ratio.

> Some reasons may be a lack of role models in STEM, sexism in the workplace or at home, or a lack of access to STEM-based classes or extracurriculars.

We can improve this through highlighting female scientists, engaging young girls in STEM-based programs like CSK, and fighting systemic sexism in STEM spaces.
Read more [here](https://www.wgu.edu/blog/why-are-there-so-few-women-in-stem1907.html#close)."""

#Let's figure out how to find the major with the highest amount of women.
#To do this, we need to learn about the sort method
  #<tbl name>.sort(<column name>)
    #this function creates a new table sorted by the values in <column name>
#We are first going to sort the "Women" column in descending order
sorted_table = women_stem.sort('Women', descending=True)
#To return the first row we can use <tbl name>.row(<index>).
  #This function will give us back the row of our specificed <index> in the form of a row object
  #Indexing for rows start at 0 and in descending table order (downwards)
first_row_sorted = sorted_table.row(0)
#To get a specific item from a row object we can use <row>.item(<column name or index>)
first_row_sorted_major=first_row_sorted.item("Major")
first_row_sorted_major

"""### Exercise #3"""

#Your turn!

#What are the five majors that have the lowest proportions of women?
  #Hint: We are looking at the "ShareWomen" column and try utilizing the functions from above.

sorted_women =...
five_rows_sorted = sorted_women.take(np.arange(0,5))
five_rows_sorted_major_only =...
five_rows_sorted_major_only

"""### Exercise #4"""

#What is the engineering major with the highest number of men?
  #Hint: You will need to use the where function and the functions from above.

engineering_majors_sorted =...
engineering_majors_sorted_firstrow =...
highest_number_men =...
highest_number_men

"""## Grouping"""

#Next, let's try grouping our data!
#<tbl name>.group(<column name>, <function>) groups rows by unique values or combinations of values in a column(s).
  #Other values are aggregated by <function>, the default being by count
  #We can use most array functions and method, including np.mean(returns the mean value of an array), sum, max, or min, in place of this <function>
grouped_women_stem = women_stem.group('Major_category')

grouped_women_stem

"""For more practice or experimentation with the `.group` function...

> Check out this [resource](http://www.data8.org/interactive_table_functions/)!

### Exercise #5
"""

#What is the maximum number of women in the Physical Sciences major category? There are multiple ways to do this, so experiment!
physical_sciences_women =...
physical_sciences_women_sorted =...
physical_sciences_women_max =...
physical_sciences_women_max

"""### Exercise #6"""

#What is the minimum ShareWomen percentage for Majors with a Median of 50000?
  #CHALLENGE: Ensure your result is an INTEGER, not an array or table
median_50000_only=...
median_50000_only_sorted=...
min_sharewoman_50000=...
min_sharewoman_50000

"""## Data Visualization"""

#Let's now explore how to plot our data for more analysis
physical_majors = women_stem.where("Major_category", "Physical Sciences")
#When we want to compare some value across some subgroups we use bar charts.
  #We use the function <tbl name>.barh(<categories>, <values>)
    #<categories> should be the name of the column with the categories for your bar chart
    #<values> should be the name of the column with the values for the corresponding categories
#Below visualizes a bar graph comparing the amount of women in different Physical Sciences majors.
physical_majors.barh("Major", "Women")

#When we want to explore the relationship between two variables, we use a scatter plot.
#Let's say that we want to see if there is a relationship between the number of Women and the number of Men
  #We can use the function <tbl name>.scatter(<x_column>, <y_column>)
    #<x_column> being the being the name of the column on the x-axis
    #<y_column> being the being the name of the column on the y-axis
physical_majors.scatter("Men", "Women")
#Do you think there is some kind of relationship between these two variables?

"""Remember to check the [Data 8 Python Reference](http://www.data8.org/fa22/reference/) for the usage documentation behind these data visualizations functions!

### Exercise #7
"""

#Plot the mean ShareWomen percentages in a bar graph for each Major category.
mean_sharewomen=women_stem.group(..., np.mean)
mean_sharewomen.barh("Major_category", "ShareWomen mean")
#What do you notice?

"""###Exercise #8"""

#Plot the relationship between the Median (x) and the ShareWomen percentages (y)in a scatter plot.
women_stem.scatter(..., ...)

"""###Exercise #9"""

#Print the major with the smallest ShareWomen value and create a bar graph showing the number of men for each major in the Health major category.
sorted_sharewomen =...
first_row_sorted =...
major_smallest =...
print(major_smallest)
health_majors =...
health_majors.barh(..., ...)

"""### Exercise #10

Let's now do an analysis of what we have seen so far from our table methods and graphs. We can use these plots and table methods to conclude something significant from our data.

> Our next part is to write an analysis using either this data or data from a different csv file below, following the steps from above.


You can use the table methods we just learned above to analyze this data from a different csv file below and write up an analysis on what you find.
You can do this through the slideshow, paper, etc.

> For some guidance on how to complete this analysis, check out this [example](https://docs.google.com/presentation/d/1jXYiQ8xSWzPRi4i6K4hSpm3OVuV7YPHn8Pwh8_xY-Xc/edit?usp=sharing)!

## Directions for Using a Different CSV File

Uncomment the subsequent code after the description of the csv file you want to use and then rerun the cell to see the table.
**Important Things to Note:**

> csv descriptions are denoted by a ## before them

> The variable name holding said table will always be the 3rd line of code under the csv description
"""

## Data Science Job Salaries
#ds_salaries_csv='https://raw.githubusercontent.com/mallikareddy22/CSK_DataScience/main/CSK%202022%20DS%20Materials/ds_salaries.csv'
#ds_salaries=Table().read_table(ds_salaries_csv)
#ds_salaries

## Study Hours
#study_hours_csv='https://raw.githubusercontent.com/mallikareddy22/CSK_DataScience/main/CSK%202022%20DS%20Materials/study_hours.csv'
#study_hours=Table().read_table(study_hours_csv)
#study_hours

## CO2 emissions
#co2_emissions_csv='https://raw.githubusercontent.com/mallikareddy22/CSK_DataScience/main/CSK%202022%20DS%20Materials/co2_emissions.csv'
#co2_emissions=Table().read_table(co2_emissions_csv)
#co2_emissions

## Student performance
#student_performance_csv='https://raw.githubusercontent.com/mallikareddy22/CSK_DataScience/main/CSK%202022%20DS%20Materials/student_performance.csv'
#student_performance=Table().read_table(student_performance_csv)
#student_performance

## Anime
#anime_csv='https://raw.githubusercontent.com/mallikareddy22/CSK_DataScience/main/CSK%202022%20DS%20Materials/anime.csv'
#anime=Table().read_table(anime_csv)
#anime

## Disney+ Movies and TV Shows
#disney+_movies_n_shows_csv='https://raw.githubusercontent.com/mallikareddy22/CSK_DataScience/main/CSK%202022%20DS%20Materials/disney_plus_titles.csv'
#disney+_movies_n_shows=Table().read_table(disney+_movies_n_shows_csv)
#disney+_movies_n_shows

## Lung Cancer
#lung_cancer_csv='https://raw.githubusercontent.com/mallikareddy22/CSK_DataScience/main/CSK%202022%20DS%20Materials/lung_cancer.csv'
#lung_cancer=Table().read_table(lung_cancer_csv)
#lung_cancer

## COVID cases
#covid_cases_csv='https://raw.githubusercontent.com/mallikareddy22/CSK_DataScience/main/CSK%202022%20DS%20Materials/covid_cases__vaccination.csv'
#covid_cases=Table().read_table(covid_cases_csv)
#covid_cases

## NBA Players
#nba_players_csv='https://raw.githubusercontent.com/mallikareddy22/CSK_DataScience/main/CSK%202022%20DS%20Materials/historical_RAPTOR_by_player.csv'
#nba_players=Table().read_table(nba_players_csv)
#nba_players

## World Happiness Report
#world_happiness_csv='https://raw.githubusercontent.com/mallikareddy22/CSK_DataScience/main/CSK%202022%20DS%20Materials/world-happiness-report-2019.csv'
#world_happiness=Table().read_table(world_happiness_csv)
#world_happiness

## Politics
#politics_csv='https://raw.githubusercontent.com/mallikareddy22/CSK_DataScience/main/CSK%202022%20DS%20Materials/politics_apr2020.csv'
#politics=Table().read_table(politics_csv)
##politics

